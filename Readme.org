#+STARTUP: indent
#+STARTUP: showstars 
#+PROPERTY: ClearOnSave true 
#+PROPERTY: header-args :mkdirp yes
* Configuration
** Auto-execute
This code block will execute all the code blocks required to get your system setup. The output of this code block will appear in the Messages buffer
#+name: Execute-On-Load
#+begin_src elisp :noweb yes :results output
  ;; Setting default docker
    (org-babel-lob-ingest "~/Dropbox/projects/CHAI/repos/CHAI-LibraryOfBable/CHAI-Tools.org")
    (org-sbe "CHAI-Tools_Init")
    ;; Auto tangle and results removeal (for cleaner git diffs)
    (org-sbe "Clear-Results-On-Save")
    (org-sbe "Tangle-On-Save")
    (setq-local *docker_id* "emacs_docker")
    (setq-local *DockerFiles* "container/")
    (setq-local *TrampPrefix* "./")
#+end_src

#+RESULTS:
 
** Org Code
*** Set Tramp General targets 
 
#+name:SetTrampTargetrDocker
 #+begin_src elisp :var Location=`,*docker_id*
  (setq-local *TrampPrefix* (concat "/docker:" Location ":/home/"))
 #+end_src
 
#+name:SetTrampTargetLocal
 #+begin_src elisp :var Location=""
  (setq-local *TrampPrefix* Location)
 #+end_src
  
 
*** Reading Container Logs  
#+name:BashDecolor
 #+begin_src bash :var dockerID=`,*docker_id* :results raw drawer 
 perl -pe 's/\e\[?.*?[\@-~]//g'
#+end_src
#+name:DockerLog
 #+begin_src bash :noweb yes :var dockerID=`,*docker_id* :results raw drawer 
   docker logs $dockerID | <<BashDecolor>> | tail -n 10
 #+end_src
 
#+name:DockerLogInSession
 #+begin_src bash :noweb yes :session DockerLog :var dockerName=`,*docker_id* :results none 
   docker logs -f $dockerName | <<BashDecolor>>
   #need a C-g to return, but leaves real-time loging in other buffer
 #+end_src
  
** Git Ignore tangled file
#+begin_src text :tangle .gitignore
  .gitignore
  container/
  .dockerignore
#+end_src
* Dev Tools
** ssh
   #+begin_src bash 
     cp ~/Dropbox/keys/gitKey ~/.ssh/gitKey
   #+end_src
  
   #+begin_src bash :tangle ssh-config
     Host github.com
      HostName github.com
      User git
      IdentityFile ~/.ssh/gitKey
   #+end_src
** git
*** install
 #+begin_src bash
     sudo apt install git
   #+end_src
*** setup
   #+begin_src bash
     #set identity 
     git config --global user.name "Douglas Perrin"
     git config --global user.email "doug2024@gmail.com"
   #+end_src
** Conda
   #+begin_src  bash :session bashsh
     cd /tmp
     curl -O https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh
     bash Anaconda3-2019.03-Linux-x86_64.sh
     source ~/.bashrc
   #+end_src
   #+begin_src bash :session bashsh
   conda create --name emacs python=3.6 
   #+end_src 

** AWS CLI 
Ensure the awscli is installed.
#+BEGIN_SRC bash
sudo apt install awscli
#+END_SRC
 You will need collect your:
  1) AWS Access Key ID
  2) AWS Secret Access Key
  3) Default region name (us-east-1)
  4) Default output format (json)

Then in a shell, run aws configure. 

#+begin_example bash
$ aws configure
  AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
  AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  Default region name [None]: us-east-1
  Default output format [None]: json
#+end_example
** Emacs
*** Prepare
   #+begin_src bash 
     git clone -b master git://git.sv.gnu.org/emacs.git

     sudo apt-get update
     sudo apt-get install build-essential automake texinfo libjpeg-dev libncurses5-dev
     sudo apt-get install libtiff5-dev libgif-dev libpng-dev libxpm-dev libgtk-3-dev libgnutls28-dev 
   #+end_src
*** Build and Install  
   #+begin_src bash
     cd emacs/
     ./autogen.sh 
     ./configure 
     make
     src/emacs --version
     sudo make install
   #+end_src
*** Install Ispell
    #+begin_src bash  
      sudo apt install ispell
    #+end_src
** Spacemacs
   #+begin_src bash
     cd ~
     git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
     cd ~/.emacs.d
     git fetch
     git checkout develop
     ln -s  ~/Dropbox/dotFiles/dotspacemacs-tangled.el .spacemacs
   #+end_src 
*** fonts
    #+begin_src bash 
      git clone --depth 1 --branch release https://github.com/adobe-fonts/source-code-pro.git ~/.fonts/adobe-fonts/source-code-pro
      fc-cache -f -v ~/.fonts/adobe-fonts/source-code-pro
    #+end_src
** Slime/ Common LISP 
     ;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
 git clone https://github.com/slime/slime.git

     #+begin_src bash
      sudo apt install sbcl sbcl-doc sbcl-source slime 
     #+end_src
    
     #+begin_src bash
       mkdir ~/quicklisp/
       cd ~/quicklisp/
       wget https://beta.quicklisp.org/quicklisp.lisp
     #+end_src

    
    and run the following in SBCL
    #+begin_src lisp
      (quicklisp-quickstart:install)
      (ql:add-to-init-file)
      (ql:quickload "quicklisp-slime-helper")
    #+end_src
    ~M-x slime~ Then test
    #+begin_src lisp
      (+ 1 2)
    #+end_src
   
** R
   #+begin_src bash
     sudo apt install r-base-core 
   #+end_src


   #+begin_src R :session *R*  
     install.packages("ggplot2")
     install.packages("plot3D")

   #+end_src


*** for R studio 
   #+begin_src bash
     cd /tmp
     wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.2.1335-amd64.deb
     sudo apt install gdebi-core
     sudo gdebi rstudio-1.2.1335-amd64.deb
   #+end_src

** Latex, Beamer, PDF preview in Emacs
   #+begin_src bash
 sudo apt install ghostscript 
 sudo apt install texlive-full
   #+end_src
* Dockerized 
** Build emacs
 #+begin_src text :tangle (concat *TrampPrefix* *DockerFiles* "Dockerfile-emacs_base")
   FROM ubuntu:18.04

   # basic stuff
   RUN echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf 

   RUN apt-get update --fix-missing

   RUN apt-get install \
       bash \
       build-essential \
       dbus-x11 \
       fontconfig \
       git \
       curl \
       gzip \
       language-pack-en-base \
       libgl1-mesa-glx \
       make \
       sudo \
       tar \
       unzip 
   RUN apt-get install \
       wget \
       apt-utils \
       automake \
       texinfo \
       libjpeg-dev \
       libncurses5-dev

   RUN  git clone -b master git://git.sv.gnu.org/emacs.git

   RUN apt-get install libtiff5-dev 
   RUN apt-get install libgif-dev 
   RUN apt-get install libpng-dev 
   RUN apt-get install libxpm-dev 
   RUN apt-get install libgtk-3-dev 
   RUN apt-get install libgnutls28-dev 
   RUN apt-get install libmagickcore-dev 
   RUN apt-get install libmagick++-dev

   RUN cd emacs/ && \
     ./autogen.sh && \
     ./configure --with-imagemagick

   RUN cd emacs/ && \
       make
   RUN cd emacs/ && \
     make install

   RUN  apt-get install ispell
   RUN  apt-get install ghostscript 
   RUN  apt-get install imagemagick 
   RUN git clone --depth 1 --branch release https://github.com/adobe-fonts/source-code-pro.git ~/.fonts/adobe-fonts/source-code-pro && \
      fc-cache -f -v ~/.fonts/adobe-fonts/source-code-pro


   # Cleanup
   RUN  apt-get purge build-essential \
          && apt-get autoremove \
          && rm -rf /tmp/* /var/lib/apt/lists/* /root/.cache/*
   # ^^^^^^^ Those layers are shared ^^^^^^^

   # Emacs
   RUN useradd -d /home/emacs -ms /bin/bash -g root -G sudo -p emacs emacs

   WORKDIR /home/emacs
   RUN mkdir .emacs.d  && chown emacs .emacs.d
   RUN mkdir dotFiles  && chown emacs dotFiles
   VOLUME .emacs.d
   VOLUME dotfiles
   USER emacs

   CMD ["bash", "-c", "emacs; /bin/bash"] 
#+end_src
 #+begin_src text :tangle (concat *TrampPrefix* *DockerFiles* "Dockerfile-spacemacs_base")
   FROM dperrin/emacs_base

   USER emacs
   WORKDIR /home/emacs

   RUN cd ~ && \
      git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d && \
      cd ~/.emacs.d && \
      git fetch && \
      git checkout develop 


   RUN rm -f .spacemacs
   RUN rm -f .spacemacs.env 
   RUN ln -s dotFiles/dot-spacemacs .spacemacs
   RUN ln -s dotFiles/dot-spacemacs.env .spacemacs.env 
    
   COPY dotSpacemacs /home/emacs/dotFiles/dot-spacemacs
   COPY dotSpacemacs.env /home/emacs/dotFiles/dot-spacemacs.env

   CMD ["bash", "-c", "emacs; /bin/bash"] 
#+end_src
#+begin_src text :tangle (concat *TrampPrefix* *DockerFiles* ".dockerignore")
Dockerfile 
Dockerfile-spacemacs_base
Dockerfile-emacs_basedot
spacemacs-tangled.el
.dockerignore
#+end_src
*** Initial .spacemacs files
 #+begin_src elisp :tangle (concat *TrampPrefix* *DockerFiles* "dotSpacemacs")
   ;; -*- mode: emacs-lisp; lexical-binding: t -*-
   ;; This file is loaded by Spacemacs at startup.
   ;; It must be stored in your home directory.

   (defun dotspacemacs/layers ()
     "Layer configuration:
   This function should only modify configuration layer settings."
     (setq-default
      ;; Base distribution to use. This is a layer contained in the directory
      ;; `+distribution'. For now available distributions are `spacemacs-base'
      ;; or `spacemacs'. (default 'spacemacs)
      dotspacemacs-distribution 'spacemacs

      ;; Lazy installation of layers (i.e. layers are installed only when a file
      ;; with a supported type is opened). Possible values are `all', `unused'
      ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
      ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
      ;; lazy install any layer that support lazy installation even the layers
      ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
      ;; installation feature and you have to explicitly list a layer in the
      ;; variable `dotspacemacs-configuration-layers' to install it.
      ;; (default 'unused)
      dotspacemacs-enable-lazy-installation 'unused

      ;; If non-nil then Spacemacs will ask for confirmation before installing
      ;; a layer lazily. (default t)
      dotspacemacs-ask-for-lazy-installation t

      ;; List of additional paths where to look for configuration layers.
      ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
      dotspacemacs-configuration-layer-path '()

      ;; List of configuration layers to load.
      dotspacemacs-configuration-layers
      '(
        ;; ----------------------------------------------------------------
        ;; Example of useful layers you may want to use right away.
        ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
        ;; `M-m f e R' (Emacs style) to install them.
        ;; ----------------------------------------------------------------
        ;; auto-completion
        ;; better-defaults
        emacs-lisp
        ;;git
        ;;helm
        ivy
        lsp
        (python :variables python-backend 'lsp)
        html
        ;; markdown
        multiple-cursors
        org
        (shell :variables
                shell-default-height 30
                shell-default-position 'bottom)
        spell-checking
        syntax-checking
        treemacs
        version-control
        ;;docker
        ;;latex
        ;;ess
     
        )

      ;; List of additional packages that will be installed without being
      ;; wrapped in a layer. If you need some configuration for these
      ;; packages, then consider creating a layer. You can also put the
      ;; configuration in `dotspacemacs/user-config'.
      ;; To use a local version of a package, use the `:location' property:
      ;; '(your-package :location "~/path/to/your-package/")
      ;; Also include the dependencies as they will not be resolved automatically.
      dotspacemacs-additional-packages '(ob-async ox-reveal)

      ;; A list of packages that cannot be updated.
      dotspacemacs-frozen-packages '()

      ;; A list of packages that will not be installed and loaded.
      dotspacemacs-excluded-packages '()

      ;; Defines the behaviour of Spacemacs when installing packages.
      ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
      ;; `used-only' installs only explicitly used packages and deletes any unused
      ;; packages as well as their unused dependencies. `used-but-keep-unused'
      ;; installs only the used packages but won't delete unused ones. `all'
      ;; installs *all* packages supported by Spacemacs and never uninstalls them.
      ;; (default is `used-only')
      dotspacemacs-install-packages 'used-only))

   (defun dotspacemacs/init ()
     "Initialization:
   This function is called at the very beginning of Spacemacs startup,
   before layer configuration.
   It should only modify the values of Spacemacs settings."
     ;; This setq-default sexp is an exhaustive list of all the supported
     ;; spacemacs settings.
     (setq-default
      ;; If non-nil then enable support for the portable dumper. You'll need
      ;; to compile Emacs 27 from source following the instructions in file
      ;; EXPERIMENTAL.org at to root of the git repository.
      ;; (default nil)
      dotspacemacs-enable-emacs-pdumper nil

      ;; Name of executable file pointing to emacs 27+. This executable must be
      ;; in your PATH.
      ;; (default "emacs")
      dotspacemacs-emacs-pdumper-executable-file "emacs"

      ;; Name of the Spacemacs dump file. This is the file will be created by the
      ;; portable dumper in the cache directory under dumps sub-directory.
      ;; To load it when starting Emacs add the parameter `--dump-file'
      ;; when invoking Emacs 27.1 executable on the command line, for instance:
      ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
      ;; (default spacemacs.pdmp)
      dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

      ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
      ;; possible. Set it to nil if you have no way to use HTTPS in your
      ;; environment, otherwise it is strongly recommended to let it set to t.
      ;; This variable has no effect if Emacs is launched with the parameter
      ;; `--insecure' which forces the value of this variable to nil.
      ;; (default t)
      dotspacemacs-elpa-https t

      ;; Maximum allowed time in seconds to contact an ELPA repository.
      ;; (default 5)
      dotspacemacs-elpa-timeout 5

      ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
      ;; This is an advanced option and should not be changed unless you suspect
      ;; performance issues due to garbage collection operations.
      ;; (default '(100000000 0.1))
      dotspacemacs-gc-cons '(100000000 0.1)

      ;; If non-nil then Spacelpa repository is the primary source to install
      ;; a locked version of packages. If nil then Spacemacs will install the
      ;; latest version of packages from MELPA. (default nil)
      dotspacemacs-use-spacelpa nil

      ;; If non-nil then verify the signature for downloaded Spacelpa archives.
      ;; (default t)
      dotspacemacs-verify-spacelpa-archives t

      ;; If non-nil then spacemacs will check for updates at startup
      ;; when the current branch is not `develop'. Note that checking for
      ;; new versions works via git commands, thus it calls GitHub services
      ;; whenever you start Emacs. (default nil)
      dotspacemacs-check-for-update nil

      ;; If non-nil, a form that evaluates to a package directory. For example, to
      ;; use different package directories for different Emacs versions, set this
      ;; to `emacs-version'. (default 'emacs-version)
      dotspacemacs-elpa-subdirectory 'emacs-version

      ;; One of `vim', `emacs' or `hybrid'.
      ;; `hybrid' is like `vim' except that `insert state' is replaced by the
      ;; `hybrid state' with `emacs' key bindings. The value can also be a list
      ;; with `:variables' keyword (similar to layers). Check the editing styles
      ;; section of the documentation for details on available variables.
      ;; (default 'vim)
      dotspacemacs-editing-style 'vim

      ;; Specify the startup banner. Default value is `official', it displays
      ;; the official spacemacs logo. An integer value is the index of text
      ;; banner, `random' chooses a random text banner in `core/banners'
      ;; directory. A string value must be a path to an image format supported
      ;; by your Emacs build.
      ;; If the value is nil then no banner is displayed. (default 'official)
      dotspacemacs-startup-banner 'official

      ;; List of items to show in startup buffer or an association list of
      ;; the form `(list-type . list-size)`. If nil then it is disabled.
      ;; Possible values for list-type are:
      ;; `recents' `bookmarks' `projects' `agenda' `todos'.
      ;; List sizes may be nil, in which case
      ;; `spacemacs-buffer-startup-lists-length' takes effect.
      dotspacemacs-startup-lists '((recents . 5)
                                   (projects . 7))

      ;; True if the home buffer should respond to resize events. (default t)
      dotspacemacs-startup-buffer-responsive t

      ;; Default major mode for a new empty buffer. Possible values are mode
      ;; names such as `text-mode'; and `nil' to use Fundamental mode.
      ;; (default `text-mode')
      dotspacemacs-new-empty-buffer-major-mode 'text-mode

      ;; Default major mode of the scratch buffer (default `text-mode')
      dotspacemacs-scratch-mode 'text-mode

      ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
      ;; (default nil)
      dotspacemacs-initial-scratch-message nil

      ;; List of themes, the first of the list is loaded when spacemacs starts.
      ;; Press `SPC T n' to cycle to the next theme in the list (works great
      ;; with 2 themes variants, one dark and one light)
      dotspacemacs-themes '(spacemacs-dark
                            spacemacs-light)

      ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
      ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
      ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
      ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
      ;; refer to the DOCUMENTATION.org for more info on how to create your own
      ;; spaceline theme. Value can be a symbol or list with additional properties.
      ;; (default '(spacemacs :separator wave :separator-scale 1.5))
      dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

      ;; If non-nil the cursor color matches the state color in GUI Emacs.
      ;; (default t)
      dotspacemacs-colorize-cursor-according-to-state t

      ;; Default font or prioritized list of fonts.
      dotspacemacs-default-font '("Source Code Pro"
                                  :size 10.0
                                  :weight normal
                                  :width normal)

      ;; The leader key (default "SPC")
      dotspacemacs-leader-key "SPC"

      ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
      ;; (default "SPC")
      dotspacemacs-emacs-command-key "SPC"

      ;; The key used for Vim Ex commands (default ":")
      dotspacemacs-ex-command-key ":"

      ;; The leader key accessible in `emacs state' and `insert state'
      ;; (default "M-m")
      dotspacemacs-emacs-leader-key "M-m"

      ;; Major mode leader key is a shortcut key which is the equivalent of
      ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
      dotspacemacs-major-mode-leader-key ","

      ;; Major mode leader key accessible in `emacs state' and `insert state'.
      ;; (default "C-M-m")
      dotspacemacs-major-mode-emacs-leader-key "C-M-m"

      ;; These variables control whether separate commands are bound in the GUI to
      ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
      ;; Setting it to a non-nil value, allows for separate commands under `C-i'
      ;; and TAB or `C-m' and `RET'.
      ;; In the terminal, these pairs are generally indistinguishable, so this only
      ;; works in the GUI. (default nil)
      dotspacemacs-distinguish-gui-tab nil

      ;; Name of the default layout (default "Default")
      dotspacemacs-default-layout-name "Default"

      ;; If non-nil the default layout name is displayed in the mode-line.
      ;; (default nil)
      dotspacemacs-display-default-layout nil

      ;; If non-nil then the last auto saved layouts are resumed automatically upon
      ;; start. (default nil)
      dotspacemacs-auto-resume-layouts nil

      ;; If non-nil, auto-generate layout name when creating new layouts. Only has
      ;; effect when using the "jump to layout by number" commands. (default nil)
      dotspacemacs-auto-generate-layout-names nil

      ;; Size (in MB) above which spacemacs will prompt to open the large file
      ;; literally to avoid performance issues. Opening a file literally means that
      ;; no major mode or minor modes are active. (default is 1)
      dotspacemacs-large-file-size 1

      ;; Location where to auto-save files. Possible values are `original' to
      ;; auto-save the file in-place, `cache' to auto-save the file to another
      ;; file stored in the cache directory and `nil' to disable auto-saving.
      ;; (default 'cache)
      dotspacemacs-auto-save-file-location 'cache

      ;; Maximum number of rollback slots to keep in the cache. (default 5)
      dotspacemacs-max-rollback-slots 5

      ;; If non-nil, the paste transient-state is enabled. While enabled, after you
      ;; paste something, pressing `C-j' and `C-k' several times cycles through the
      ;; elements in the `kill-ring'. (default nil)
      dotspacemacs-enable-paste-transient-state nil

      ;; Which-key delay in seconds. The which-key buffer is the popup listing
      ;; the commands bound to the current keystroke sequence. (default 0.4)
      dotspacemacs-which-key-delay 0.4

      ;; Which-key frame position. Possible values are `right', `bottom' and
      ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
      ;; right; if there is insufficient space it displays it at the bottom.
      ;; (default 'bottom)
      dotspacemacs-which-key-position 'bottom

      ;; Control where `switch-to-buffer' displays the buffer. If nil,
      ;; `switch-to-buffer' displays the buffer in the current window even if
      ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
      ;; displays the buffer in a same-purpose window even if the buffer can be
      ;; displayed in the current window. (default nil)
      dotspacemacs-switch-to-buffer-prefers-purpose nil

      ;; If non-nil a progress bar is displayed when spacemacs is loading. This
      ;; may increase the boot time on some systems and emacs builds, set it to
      ;; nil to boost the loading time. (default t)
      dotspacemacs-loading-progress-bar t

      ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
      ;; (Emacs 24.4+ only)
      dotspacemacs-fullscreen-at-startup nil

      ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
      ;; Use to disable fullscreen animations in OSX. (default nil)
      dotspacemacs-fullscreen-use-non-native nil

      ;; If non-nil the frame is maximized when Emacs starts up.
      ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
      ;; (default nil) (Emacs 24.4+ only)
      dotspacemacs-maximized-at-startup nil

      ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
      ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
      ;; borderless fullscreen. (default nil)
      dotspacemacs-undecorated-at-startup nil

      ;; A value from the range (0..100), in increasing opacity, which describes
      ;; the transparency level of a frame when it's active or selected.
      ;; Transparency can be toggled through `toggle-transparency'. (default 90)
      dotspacemacs-active-transparency 90

      ;; A value from the range (0..100), in increasing opacity, which describes
      ;; the transparency level of a frame when it's inactive or deselected.
      ;; Transparency can be toggled through `toggle-transparency'. (default 90)
      dotspacemacs-inactive-transparency 90

      ;; If non-nil show the titles of transient states. (default t)
      dotspacemacs-show-transient-state-title t

      ;; If non-nil show the color guide hint for transient state keys. (default t)
      dotspacemacs-show-transient-state-color-guide t

      ;; If non-nil unicode symbols are displayed in the mode line.
      ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
      ;; the value to quoted `display-graphic-p'. (default t)
      dotspacemacs-mode-line-unicode-symbols t

      ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
      ;; scrolling overrides the default behavior of Emacs which recenters point
      ;; when it reaches the top or bottom of the screen. (default t)
      dotspacemacs-smooth-scrolling t

      ;; Control line numbers activation.
      ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
      ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
      ;; numbers are relative. If set to `visual', line numbers are also relative,
      ;; but lines are only visual lines are counted. For example, folded lines
      ;; will not be counted and wrapped lines are counted as multiple lines.
      ;; This variable can also be set to a property list for finer control:
      ;; '(:relative nil
      ;;   :visual nil
      ;;   :disabled-for-modes dired-mode
      ;;                       doc-view-mode
      ;;                       markdown-mode
      ;;                       org-mode
      ;;                       pdf-view-mode
      ;;                       text-mode
      ;;   :size-limit-kb 1000)
      ;; When used in a plist, `visual' takes precedence over `relative'.
      ;; (default nil)
      dotspacemacs-line-numbers nil

      ;; Code folding method. Possible values are `evil' and `origami'.
      ;; (default 'evil)
      dotspacemacs-folding-method 'evil

      ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
      ;; (default nil)
      dotspacemacs-smartparens-strict-mode nil

      ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
      ;; over any automatically added closing parenthesis, bracket, quote, etc...
      ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
      dotspacemacs-smart-closing-parenthesis nil

      ;; Select a scope to highlight delimiters. Possible values are `any',
      ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
      ;; emphasis the current one). (default 'all)
      dotspacemacs-highlight-delimiters 'all

      ;; If non-nil, start an Emacs server if one is not already running.
      ;; (default nil)
      dotspacemacs-enable-server nil

      ;; Set the emacs server socket location.
      ;; If nil, uses whatever the Emacs default is, otherwise a directory path
      ;; like \"~/.emacs.d/server\". It has no effect if
      ;; `dotspacemacs-enable-server' is nil.
      ;; (default nil)
      dotspacemacs-server-socket-dir nil

      ;; If non-nil, advise quit functions to keep server open when quitting.
      ;; (default nil)
      dotspacemacs-persistent-server nil

      ;; List of search tool executable names. Spacemacs uses the first installed
      ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
      ;; (default '("rg" "ag" "pt" "ack" "grep"))
      dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

      ;; Format specification for setting the frame title.
      ;; %a - the `abbreviated-file-name', or `buffer-name'
      ;; %t - `projectile-project-name'
      ;; %I - `invocation-name'
      ;; %S - `system-name'
      ;; %U - contents of $USER
      ;; %b - buffer name
      ;; %f - visited file name
      ;; %F - frame name
      ;; %s - process status
      ;; %p - percent of buffer above top of window, or Top, Bot or All
      ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
      ;; %m - mode name
      ;; %n - Narrow if appropriate
      ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
      ;; %Z - like %z, but including the end-of-line format
      ;; (default "%I@%S")
      dotspacemacs-frame-title-format "%I@%S"

      ;; Format specification for setting the icon title format
      ;; (default nil - same as frame-title-format)
      dotspacemacs-icon-title-format nil

      ;; Delete whitespace while saving buffer. Possible values are `all'
      ;; to aggressively delete empty line and long sequences of whitespace,
      ;; `trailing' to delete only the whitespace at end of lines, `changed' to
      ;; delete only whitespace for changed lines or `nil' to disable cleanup.
      ;; (default nil)
      dotspacemacs-whitespace-cleanup nil

      ;; Either nil or a number of seconds. If non-nil zone out after the specified
      ;; number of seconds. (default nil)
      dotspacemacs-zone-out-when-idle nil

      ;; Run `spacemacs/prettify-org-buffer' when
      ;; visiting README.org files of Spacemacs.
      ;; (default nil)
      dotspacemacs-pretty-docs nil))

   (defun dotspacemacs/user-env ()
     "Environment variables setup.
   This function defines the environment variables for your Emacs session. By
   default it calls `spacemacs/load-spacemacs-env' which loads the environment
   variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
   See the header of this file for more information."
     (spacemacs/load-spacemacs-env))

   (defun dotspacemacs/user-init ()
     "Initialization for user code:
   This function is called immediately after `dotspacemacs/init', before layer
   configuration.
   It is mostly for variables that should be set before packages are loaded.
   If you are unsure, try setting them in `dotspacemacs/user-config' first."
     )

   (defun dotspacemacs/user-load ()
     "Library to load while dumping.
   This function is called only while dumping Spacemacs configuration. You can
   `require' or `load' the libraries of your choice that will be included in the
   dump."
     )

   (defun dotspacemacs/user-config ()
     "Configuration for user code:
   This function is called at the very end of Spacemacs startup, after layer
   configuration.
   Put your configuration code here, except for variables that should be set
   before packages are loaded."
     (when (version<= "9.2" (org-version))
       (require 'org-tempo))

   ;; hopefully this keeps me from case changing buffer by accident
       (put 'downcase-region 'disabled t)
       (put 'upcase-region 'disabled t)

       ;;; remove effects of clicking to regain window, avoids accidental paste into to buffer in XWindows
       (add-hook 'spacemacs-buffer-mode-hook
                 (lambda ()
                   (set (make-local-variable 'mouse-1-click-follows-link) nil)))

       ;;; I like line numbers
       (setq-default display-line-numbers-type 'visual
                     display-line-numbers-current-absolute t
                     display-line-numbers-width 3
                     display-line-numbers-widen t)
       (add-hook 'text-mode-hook #'display-line-numbers-mode)
       (add-hook 'prog-mode-hook #'display-line-numbers-mode)
       (add-hook 'org-mode-hook #'display-line-numbers-mode)
       (spacemacs/toggle-highlight-current-line-globally-off)

       ;; highlights changes within lines not just whole lines for magit diff
       (customize-set-variable 'magit-diff-refine-hunk 'all)
       (eval-after-load 'org
         '(progn
            (require 'ob-async)

            (setq package-check-signature nil)

            ;; always enable auto indent mode
            (setq org-indent-mode t)

            ;; fontify source code
            (setq org-src-fontify-natively t)

            ;; use current window when switch to source block
            (setq org-src-window-setup 'current-window)

            ;; disable prompting to evaluate babel blocks
            (setq org-confirm-babel-evaluate nil)

            ;; disable add validation link when export to html
            (setq org-html-validation-link nil) 
            (org-babel-do-load-languages
             'org-babel-load-languages
             '((emacs-lisp . t)
               (latex . t)
               (python . t)
               (shell . t)
               (org . t)
               ;;(lisp . t)
               ;;(R . t)
               ))
            )
         )
     )

   ;; Do not write anything past this comment. This is where Emacs will
   ;; auto-generate custom variable definitions.
#+end_src
 #+begin_src text :tangle (concat *TrampPrefix* *DockerFiles* "dotSpacemacs.env")
   # ---------------------------------------------------------------------------
   #                    Spacemacs environment variables
   # ---------------------------------------------------------------------------
   # This file has been generated by Spacemacs. It contains all found environment
   # variables defined in your default shell except the black listed variables
   # defined in `spacemacs-ignored-environment-variables'. Some variables may be
   # listed twice, the last one is effective except for the PATH variables.
   # All PATH values are added to the `exec-path' variable without duplicates.
   #
   # You can safely edit this file and tweak the values or remove the duplicates,
   # Spacemacs won't overwrite it unless you call the function
   # `spacemacs/force-init-spacemacs-env'.
   #
   # If you don't want to use this file and manage your environment variables
   # yourself then remove the call to `spacemacs/load-spacemacs-env' from your
   # `dotspacemacs/user-env' function in your dotfile and replace it with your
   # own initialization code. You can use `exec-path-from-shell' if you add it
   # to your additional packages or simply use `setenv' and
   # `(add-to-list 'exec-path ...)' which are built-in.
   #
   # It is recommended to get used to this file as it unambiguously and
   # explicitly set the values of your environment variables.
   # ---------------------------------------------------------------------------

   # Environment variables:
   # ----------------------
   DEBIAN_FRONTEND=noninteractive
   DISPLAY=172.19.96.1:0.0
   HOME=/home/emacs
   HOSTNAME=0169c7b4e696
   PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
   PWD=/home/emacs
   SHLVL=1
   _=/usr/local/bin/emacs

#+end_src
*** build images
#+begin_src bash :session *dockerBuild* :dir (concat *TrampPrefix* *DockerFiles*) :results raw drawer 
  cp Dockerfile-emacs_base Dockerfile
  docker build -t dperrin/emacs_base .
  echo Built emacs_base
#+end_src


#+begin_src bash  :dir (concat *TrampPrefix* *DockerFiles*)  :results raw drawer
  cp Dockerfile-spacemacs_base Dockerfile
  docker build -t dperrin/spacemacs_base .
#+end_src

*** push to dockerhub
#+begin_src bash  :dir (concat *TrampPrefix* *DockerFiles*)  :results raw drawer
  docker push dperrin/spacemacs_base
#+end_src

*** Run emacs
#+begin_src bash :dir `,*TrampPrefix* :var dockerName=`,*docker_id* :results raw drawer
  export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0
  mkdir /home/dperrin/Workdir
  sudo chmod g+w /home/dperrin/Workdir 
  docker run --rm --name emacs \
         -v /tmp/.X11-unix:/tmp/.X11-unix \
         -v dotEmacsDir:/home/emacs/.emacs.d \
         -v EmacsdotFiles:/home/emacs/dotFiles \
         -v /home/dperrin/Workdir:/home/emacs/Workdir \
         -e DISPLAY=$DISPLAY dperrin/spacemacs_base
 #+end_src

removes local volumes for testing
#+begin_src bash :dir `,*TrampPrefix* :var dockerName=`,*docker_id* :results raw drawer
docker volume rm EmacsdotFiles
docker volume rm dotEmacsDir
 #+end_src


*** TODO .emacs.d should probably have the org .ele files deleted there seen to be a melpa version problem with them

#+begin_src bash :results raw drawer
 #docker login
 docker tag $(docker images | grep spacemacs_inited | awk '{print $3}') dperrin/emacs:firsttry
 docker push dperrin/emacs 
 #+end_src


** add in R
 #+begin_src text :tangle (concat *TrampPrefix* *DockerFiles* "Dockerfile-spacemacs_R")
   FROM dperrin/spacemacs_base
   USER root
   RUN apt-get update
   RUN apt-get install -y software-properties-common
   RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
   RUN add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'
   RUN apt-get update
   RUN apt-get install -y r-base


   RUN R -e "install.packages('ggplot2')"
   RUN R -e "install.packages('plot3D')"

   USER emacs
   WORKDIR /home/emacs
   CMD ["bash", "-c", "emacs; /bin/bash"] 
#+end_src
 #+begin_src elisp :tangle (concat *TrampPrefix* *DockerFiles* "dotSpacemacsWithR")
   ;; -*- mode: emacs-lisp; lexical-binding: t -*-
   ;; This file is loaded by Spacemacs at startup.
   ;; It must be stored in your home directory.

   (defun dotspacemacs/layers ()
     "Layer configuration:
   This function should only modify configuration layer settings."
     (setq-default
      ;; Base distribution to use. This is a layer contained in the directory
      ;; `+distribution'. For now available distributions are `spacemacs-base'
      ;; or `spacemacs'. (default 'spacemacs)
      dotspacemacs-distribution 'spacemacs

      ;; Lazy installation of layers (i.e. layers are installed only when a file
      ;; with a supported type is opened). Possible values are `all', `unused'
      ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
      ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
      ;; lazy install any layer that support lazy installation even the layers
      ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
      ;; installation feature and you have to explicitly list a layer in the
      ;; variable `dotspacemacs-configuration-layers' to install it.
      ;; (default 'unused)
      dotspacemacs-enable-lazy-installation 'unused

      ;; If non-nil then Spacemacs will ask for confirmation before installing
      ;; a layer lazily. (default t)
      dotspacemacs-ask-for-lazy-installation t

      ;; List of additional paths where to look for configuration layers.
      ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
      dotspacemacs-configuration-layer-path '()

      ;; List of configuration layers to load.
      dotspacemacs-configuration-layers
      '(
        ;; ----------------------------------------------------------------
        ;; Example of useful layers you may want to use right away.
        ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
        ;; `M-m f e R' (Emacs style) to install them.
        ;; ----------------------------------------------------------------
        ;; auto-completion
        ;; better-defaults
        emacs-lisp
        ;;git
        ;;helm
        ivy
        lsp
        (python :variables python-backend 'lsp)
        html
        ;; markdown
        multiple-cursors
        org
        (shell :variables
                shell-default-height 30
                shell-default-position 'bottom)
        spell-checking
        syntax-checking
        treemacs
        version-control
        ;;docker
        ;;latex
        ;;ess
     
        )

      ;; List of additional packages that will be installed without being
      ;; wrapped in a layer. If you need some configuration for these
      ;; packages, then consider creating a layer. You can also put the
      ;; configuration in `dotspacemacs/user-config'.
      ;; To use a local version of a package, use the `:location' property:
      ;; '(your-package :location "~/path/to/your-package/")
      ;; Also include the dependencies as they will not be resolved automatically.
      dotspacemacs-additional-packages '(ob-async ox-reveal)

      ;; A list of packages that cannot be updated.
      dotspacemacs-frozen-packages '()

      ;; A list of packages that will not be installed and loaded.
      dotspacemacs-excluded-packages '()

      ;; Defines the behaviour of Spacemacs when installing packages.
      ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
      ;; `used-only' installs only explicitly used packages and deletes any unused
      ;; packages as well as their unused dependencies. `used-but-keep-unused'
      ;; installs only the used packages but won't delete unused ones. `all'
      ;; installs *all* packages supported by Spacemacs and never uninstalls them.
      ;; (default is `used-only')
      dotspacemacs-install-packages 'used-only))

   (defun dotspacemacs/init ()
     "Initialization:
   This function is called at the very beginning of Spacemacs startup,
   before layer configuration.
   It should only modify the values of Spacemacs settings."
     ;; This setq-default sexp is an exhaustive list of all the supported
     ;; spacemacs settings.
     (setq-default
      ;; If non-nil then enable support for the portable dumper. You'll need
      ;; to compile Emacs 27 from source following the instructions in file
      ;; EXPERIMENTAL.org at to root of the git repository.
      ;; (default nil)
      dotspacemacs-enable-emacs-pdumper nil

      ;; Name of executable file pointing to emacs 27+. This executable must be
      ;; in your PATH.
      ;; (default "emacs")
      dotspacemacs-emacs-pdumper-executable-file "emacs"

      ;; Name of the Spacemacs dump file. This is the file will be created by the
      ;; portable dumper in the cache directory under dumps sub-directory.
      ;; To load it when starting Emacs add the parameter `--dump-file'
      ;; when invoking Emacs 27.1 executable on the command line, for instance:
      ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
      ;; (default spacemacs.pdmp)
      dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

      ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
      ;; possible. Set it to nil if you have no way to use HTTPS in your
      ;; environment, otherwise it is strongly recommended to let it set to t.
      ;; This variable has no effect if Emacs is launched with the parameter
      ;; `--insecure' which forces the value of this variable to nil.
      ;; (default t)
      dotspacemacs-elpa-https t

      ;; Maximum allowed time in seconds to contact an ELPA repository.
      ;; (default 5)
      dotspacemacs-elpa-timeout 5

      ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
      ;; This is an advanced option and should not be changed unless you suspect
      ;; performance issues due to garbage collection operations.
      ;; (default '(100000000 0.1))
      dotspacemacs-gc-cons '(100000000 0.1)

      ;; If non-nil then Spacelpa repository is the primary source to install
      ;; a locked version of packages. If nil then Spacemacs will install the
      ;; latest version of packages from MELPA. (default nil)
      dotspacemacs-use-spacelpa nil

      ;; If non-nil then verify the signature for downloaded Spacelpa archives.
      ;; (default t)
      dotspacemacs-verify-spacelpa-archives t

      ;; If non-nil then spacemacs will check for updates at startup
      ;; when the current branch is not `develop'. Note that checking for
      ;; new versions works via git commands, thus it calls GitHub services
      ;; whenever you start Emacs. (default nil)
      dotspacemacs-check-for-update nil

      ;; If non-nil, a form that evaluates to a package directory. For example, to
      ;; use different package directories for different Emacs versions, set this
      ;; to `emacs-version'. (default 'emacs-version)
      dotspacemacs-elpa-subdirectory 'emacs-version

      ;; One of `vim', `emacs' or `hybrid'.
      ;; `hybrid' is like `vim' except that `insert state' is replaced by the
      ;; `hybrid state' with `emacs' key bindings. The value can also be a list
      ;; with `:variables' keyword (similar to layers). Check the editing styles
      ;; section of the documentation for details on available variables.
      ;; (default 'vim)
      dotspacemacs-editing-style 'vim

      ;; Specify the startup banner. Default value is `official', it displays
      ;; the official spacemacs logo. An integer value is the index of text
      ;; banner, `random' chooses a random text banner in `core/banners'
      ;; directory. A string value must be a path to an image format supported
      ;; by your Emacs build.
      ;; If the value is nil then no banner is displayed. (default 'official)
      dotspacemacs-startup-banner 'official

      ;; List of items to show in startup buffer or an association list of
      ;; the form `(list-type . list-size)`. If nil then it is disabled.
      ;; Possible values for list-type are:
      ;; `recents' `bookmarks' `projects' `agenda' `todos'.
      ;; List sizes may be nil, in which case
      ;; `spacemacs-buffer-startup-lists-length' takes effect.
      dotspacemacs-startup-lists '((recents . 5)
                                   (projects . 7))

      ;; True if the home buffer should respond to resize events. (default t)
      dotspacemacs-startup-buffer-responsive t

      ;; Default major mode for a new empty buffer. Possible values are mode
      ;; names such as `text-mode'; and `nil' to use Fundamental mode.
      ;; (default `text-mode')
      dotspacemacs-new-empty-buffer-major-mode 'text-mode

      ;; Default major mode of the scratch buffer (default `text-mode')
      dotspacemacs-scratch-mode 'text-mode

      ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
      ;; (default nil)
      dotspacemacs-initial-scratch-message nil

      ;; List of themes, the first of the list is loaded when spacemacs starts.
      ;; Press `SPC T n' to cycle to the next theme in the list (works great
      ;; with 2 themes variants, one dark and one light)
      dotspacemacs-themes '(spacemacs-dark
                            spacemacs-light)

      ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
      ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
      ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
      ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
      ;; refer to the DOCUMENTATION.org for more info on how to create your own
      ;; spaceline theme. Value can be a symbol or list with additional properties.
      ;; (default '(spacemacs :separator wave :separator-scale 1.5))
      dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

      ;; If non-nil the cursor color matches the state color in GUI Emacs.
      ;; (default t)
      dotspacemacs-colorize-cursor-according-to-state t

      ;; Default font or prioritized list of fonts.
      dotspacemacs-default-font '("Source Code Pro"
                                  :size 10.0
                                  :weight normal
                                  :width normal)

      ;; The leader key (default "SPC")
      dotspacemacs-leader-key "SPC"

      ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
      ;; (default "SPC")
      dotspacemacs-emacs-command-key "SPC"

      ;; The key used for Vim Ex commands (default ":")
      dotspacemacs-ex-command-key ":"

      ;; The leader key accessible in `emacs state' and `insert state'
      ;; (default "M-m")
      dotspacemacs-emacs-leader-key "M-m"

      ;; Major mode leader key is a shortcut key which is the equivalent of
      ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
      dotspacemacs-major-mode-leader-key ","

      ;; Major mode leader key accessible in `emacs state' and `insert state'.
      ;; (default "C-M-m")
      dotspacemacs-major-mode-emacs-leader-key "C-M-m"

      ;; These variables control whether separate commands are bound in the GUI to
      ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
      ;; Setting it to a non-nil value, allows for separate commands under `C-i'
      ;; and TAB or `C-m' and `RET'.
      ;; In the terminal, these pairs are generally indistinguishable, so this only
      ;; works in the GUI. (default nil)
      dotspacemacs-distinguish-gui-tab nil

      ;; Name of the default layout (default "Default")
      dotspacemacs-default-layout-name "Default"

      ;; If non-nil the default layout name is displayed in the mode-line.
      ;; (default nil)
      dotspacemacs-display-default-layout nil

      ;; If non-nil then the last auto saved layouts are resumed automatically upon
      ;; start. (default nil)
      dotspacemacs-auto-resume-layouts nil

      ;; If non-nil, auto-generate layout name when creating new layouts. Only has
      ;; effect when using the "jump to layout by number" commands. (default nil)
      dotspacemacs-auto-generate-layout-names nil

      ;; Size (in MB) above which spacemacs will prompt to open the large file
      ;; literally to avoid performance issues. Opening a file literally means that
      ;; no major mode or minor modes are active. (default is 1)
      dotspacemacs-large-file-size 1

      ;; Location where to auto-save files. Possible values are `original' to
      ;; auto-save the file in-place, `cache' to auto-save the file to another
      ;; file stored in the cache directory and `nil' to disable auto-saving.
      ;; (default 'cache)
      dotspacemacs-auto-save-file-location 'cache

      ;; Maximum number of rollback slots to keep in the cache. (default 5)
      dotspacemacs-max-rollback-slots 5

      ;; If non-nil, the paste transient-state is enabled. While enabled, after you
      ;; paste something, pressing `C-j' and `C-k' several times cycles through the
      ;; elements in the `kill-ring'. (default nil)
      dotspacemacs-enable-paste-transient-state nil

      ;; Which-key delay in seconds. The which-key buffer is the popup listing
      ;; the commands bound to the current keystroke sequence. (default 0.4)
      dotspacemacs-which-key-delay 0.4

      ;; Which-key frame position. Possible values are `right', `bottom' and
      ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
      ;; right; if there is insufficient space it displays it at the bottom.
      ;; (default 'bottom)
      dotspacemacs-which-key-position 'bottom

      ;; Control where `switch-to-buffer' displays the buffer. If nil,
      ;; `switch-to-buffer' displays the buffer in the current window even if
      ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
      ;; displays the buffer in a same-purpose window even if the buffer can be
      ;; displayed in the current window. (default nil)
      dotspacemacs-switch-to-buffer-prefers-purpose nil

      ;; If non-nil a progress bar is displayed when spacemacs is loading. This
      ;; may increase the boot time on some systems and emacs builds, set it to
      ;; nil to boost the loading time. (default t)
      dotspacemacs-loading-progress-bar t

      ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
      ;; (Emacs 24.4+ only)
      dotspacemacs-fullscreen-at-startup nil

      ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
      ;; Use to disable fullscreen animations in OSX. (default nil)
      dotspacemacs-fullscreen-use-non-native nil

      ;; If non-nil the frame is maximized when Emacs starts up.
      ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
      ;; (default nil) (Emacs 24.4+ only)
      dotspacemacs-maximized-at-startup nil

      ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
      ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
      ;; borderless fullscreen. (default nil)
      dotspacemacs-undecorated-at-startup nil

      ;; A value from the range (0..100), in increasing opacity, which describes
      ;; the transparency level of a frame when it's active or selected.
      ;; Transparency can be toggled through `toggle-transparency'. (default 90)
      dotspacemacs-active-transparency 90

      ;; A value from the range (0..100), in increasing opacity, which describes
      ;; the transparency level of a frame when it's inactive or deselected.
      ;; Transparency can be toggled through `toggle-transparency'. (default 90)
      dotspacemacs-inactive-transparency 90

      ;; If non-nil show the titles of transient states. (default t)
      dotspacemacs-show-transient-state-title t

      ;; If non-nil show the color guide hint for transient state keys. (default t)
      dotspacemacs-show-transient-state-color-guide t

      ;; If non-nil unicode symbols are displayed in the mode line.
      ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
      ;; the value to quoted `display-graphic-p'. (default t)
      dotspacemacs-mode-line-unicode-symbols t

      ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
      ;; scrolling overrides the default behavior of Emacs which recenters point
      ;; when it reaches the top or bottom of the screen. (default t)
      dotspacemacs-smooth-scrolling t

      ;; Control line numbers activation.
      ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
      ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
      ;; numbers are relative. If set to `visual', line numbers are also relative,
      ;; but lines are only visual lines are counted. For example, folded lines
      ;; will not be counted and wrapped lines are counted as multiple lines.
      ;; This variable can also be set to a property list for finer control:
      ;; '(:relative nil
      ;;   :visual nil
      ;;   :disabled-for-modes dired-mode
      ;;                       doc-view-mode
      ;;                       markdown-mode
      ;;                       org-mode
      ;;                       pdf-view-mode
      ;;                       text-mode
      ;;   :size-limit-kb 1000)
      ;; When used in a plist, `visual' takes precedence over `relative'.
      ;; (default nil)
      dotspacemacs-line-numbers nil

      ;; Code folding method. Possible values are `evil' and `origami'.
      ;; (default 'evil)
      dotspacemacs-folding-method 'evil

      ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
      ;; (default nil)
      dotspacemacs-smartparens-strict-mode nil

      ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
      ;; over any automatically added closing parenthesis, bracket, quote, etc...
      ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
      dotspacemacs-smart-closing-parenthesis nil

      ;; Select a scope to highlight delimiters. Possible values are `any',
      ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
      ;; emphasis the current one). (default 'all)
      dotspacemacs-highlight-delimiters 'all

      ;; If non-nil, start an Emacs server if one is not already running.
      ;; (default nil)
      dotspacemacs-enable-server nil

      ;; Set the emacs server socket location.
      ;; If nil, uses whatever the Emacs default is, otherwise a directory path
      ;; like \"~/.emacs.d/server\". It has no effect if
      ;; `dotspacemacs-enable-server' is nil.
      ;; (default nil)
      dotspacemacs-server-socket-dir nil

      ;; If non-nil, advise quit functions to keep server open when quitting.
      ;; (default nil)
      dotspacemacs-persistent-server nil

      ;; List of search tool executable names. Spacemacs uses the first installed
      ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
      ;; (default '("rg" "ag" "pt" "ack" "grep"))
      dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

      ;; Format specification for setting the frame title.
      ;; %a - the `abbreviated-file-name', or `buffer-name'
      ;; %t - `projectile-project-name'
      ;; %I - `invocation-name'
      ;; %S - `system-name'
      ;; %U - contents of $USER
      ;; %b - buffer name
      ;; %f - visited file name
      ;; %F - frame name
      ;; %s - process status
      ;; %p - percent of buffer above top of window, or Top, Bot or All
      ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
      ;; %m - mode name
      ;; %n - Narrow if appropriate
      ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
      ;; %Z - like %z, but including the end-of-line format
      ;; (default "%I@%S")
      dotspacemacs-frame-title-format "%I@%S"

      ;; Format specification for setting the icon title format
      ;; (default nil - same as frame-title-format)
      dotspacemacs-icon-title-format nil

      ;; Delete whitespace while saving buffer. Possible values are `all'
      ;; to aggressively delete empty line and long sequences of whitespace,
      ;; `trailing' to delete only the whitespace at end of lines, `changed' to
      ;; delete only whitespace for changed lines or `nil' to disable cleanup.
      ;; (default nil)
      dotspacemacs-whitespace-cleanup nil

      ;; Either nil or a number of seconds. If non-nil zone out after the specified
      ;; number of seconds. (default nil)
      dotspacemacs-zone-out-when-idle nil

      ;; Run `spacemacs/prettify-org-buffer' when
      ;; visiting README.org files of Spacemacs.
      ;; (default nil)
      dotspacemacs-pretty-docs nil))

   (defun dotspacemacs/user-env ()
     "Environment variables setup.
   This function defines the environment variables for your Emacs session. By
   default it calls `spacemacs/load-spacemacs-env' which loads the environment
   variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
   See the header of this file for more information."
     (spacemacs/load-spacemacs-env))

   (defun dotspacemacs/user-init ()
     "Initialization for user code:
   This function is called immediately after `dotspacemacs/init', before layer
   configuration.
   It is mostly for variables that should be set before packages are loaded.
   If you are unsure, try setting them in `dotspacemacs/user-config' first."
     )

   (defun dotspacemacs/user-load ()
     "Library to load while dumping.
   This function is called only while dumping Spacemacs configuration. You can
   `require' or `load' the libraries of your choice that will be included in the
   dump."
     )

   (defun dotspacemacs/user-config ()
     "Configuration for user code:
   This function is called at the very end of Spacemacs startup, after layer
   configuration.
   Put your configuration code here, except for variables that should be set
   before packages are loaded."
     (when (version<= "9.2" (org-version))
       (require 'org-tempo))

   ;; hopefully this keeps me from case changing buffer by accident
       (put 'downcase-region 'disabled t)
       (put 'upcase-region 'disabled t)

       ;;; remove effects of clicking to regain window, avoids accidental paste into to buffer in XWindows
       (add-hook 'spacemacs-buffer-mode-hook
                 (lambda ()
                   (set (make-local-variable 'mouse-1-click-follows-link) nil)))

       ;;; I like line numbers
       (setq-default display-line-numbers-type 'visual
                     display-line-numbers-current-absolute t
                     display-line-numbers-width 3
                     display-line-numbers-widen t)
       (add-hook 'text-mode-hook #'display-line-numbers-mode)
       (add-hook 'prog-mode-hook #'display-line-numbers-mode)
       (add-hook 'org-mode-hook #'display-line-numbers-mode)
       (spacemacs/toggle-highlight-current-line-globally-off)

       ;; highlights changes within lines not just whole lines for magit diff
       (customize-set-variable 'magit-diff-refine-hunk 'all)
       (eval-after-load 'org
         '(progn
            (require 'ob-async)

            (setq package-check-signature nil)

            ;; always enable auto indent mode
            (setq org-indent-mode t)

            ;; fontify source code
            (setq org-src-fontify-natively t)

            ;; use current window when switch to source block
            (setq org-src-window-setup 'current-window)

            ;; disable prompting to evaluate babel blocks
            (setq org-confirm-babel-evaluate nil)

            ;; disable add validation link when export to html
            (setq org-html-validation-link nil) 
            (org-babel-do-load-languages
             'org-babel-load-languages
             '((emacs-lisp . t)
               (latex . t)
               (python . t)
               (shell . t)
               (org . t)
               ;;(lisp . t)
               ;;(R . t)
               ))
            )
         )
     )

   ;; Do not write anything past this comment. This is where Emacs will
   ;; auto-generate custom variable definitions.
#+end_src
*** build images
#+begin_src bash  :dir (concat *TrampPrefix* *DockerFiles*)  :results raw drawer
  cp Dockerfile-spacemacs_R Dockerfile
  docker build -t dperrin/spacemacs_r .
#+end_src

** Python?
** Latex
** slime stuff
 #+begin_src lisp 
   #!/usr/local/bin/sbcl --script
   (quicklisp-quickstart:install)
   (ql:add-to-init-file)
   (ql:quickload "quicklisp-slime-helper")
   (quit)
    #+end_src

 #+begin_src lisp 
   #!/usr/local/bin/sbcl --script
   ;;; blocks a input ... gerrrr
   (ql:add-to-init-file)
   (ql:quickload "quicklisp-slime-helper")
   (quit)
    #+end_src
* File Local Variables
# This Must be at the end of the file 
# Local Variables: 
# eval: (org-sbe "Execute-On-Load")
# End:

#  LocalWords:  JS html CSS AWS ECS APIs Keras rabbitmq
